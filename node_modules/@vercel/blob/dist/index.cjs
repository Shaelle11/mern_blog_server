"use strict";Object.defineProperty(exports, "__esModule", {value: true});










var _chunkQTTJNF6Bcjs = require('./chunk-QTTJNF6B.cjs');

// src/del.ts
async function del(url, options) {
  await _chunkQTTJNF6Bcjs.requestApi.call(void 0, 
    "/delete",
    {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify({ urls: Array.isArray(url) ? url : [url] })
    },
    options
  );
}

// src/head.ts
async function head(url, options) {
  const searchParams = new URLSearchParams({ url });
  const response = await _chunkQTTJNF6Bcjs.requestApi.call(void 0, 
    `?${searchParams.toString()}`,
    // HEAD can't have body as a response, so we use GET
    { method: "GET" },
    options
  );
  return {
    url: response.url,
    downloadUrl: response.downloadUrl,
    pathname: response.pathname,
    size: response.size,
    contentType: response.contentType,
    contentDisposition: response.contentDisposition,
    cacheControl: response.cacheControl,
    uploadedAt: new Date(response.uploadedAt)
  };
}

// src/list.ts
async function list(options) {
  var _a;
  const searchParams = new URLSearchParams();
  if (options == null ? void 0 : options.limit) {
    searchParams.set("limit", options.limit.toString());
  }
  if (options == null ? void 0 : options.prefix) {
    searchParams.set("prefix", options.prefix);
  }
  if (options == null ? void 0 : options.cursor) {
    searchParams.set("cursor", options.cursor);
  }
  if (options == null ? void 0 : options.mode) {
    searchParams.set("mode", options.mode);
  }
  const response = await _chunkQTTJNF6Bcjs.requestApi.call(void 0, 
    `?${searchParams.toString()}`,
    { method: "GET" },
    options
  );
  if ((options == null ? void 0 : options.mode) === "folded") {
    return {
      folders: (_a = response.folders) != null ? _a : [],
      cursor: response.cursor,
      hasMore: response.hasMore,
      blobs: response.blobs.map(mapBlobResult)
    };
  }
  return {
    cursor: response.cursor,
    hasMore: response.hasMore,
    blobs: response.blobs.map(mapBlobResult)
  };
}
function mapBlobResult(blobResult) {
  return {
    url: blobResult.url,
    downloadUrl: blobResult.downloadUrl,
    pathname: blobResult.pathname,
    size: blobResult.size,
    uploadedAt: new Date(blobResult.uploadedAt)
  };
}

// src/copy.ts
async function copy(fromUrl, toPathname, options) {
  if (!options) {
    throw new (0, _chunkQTTJNF6Bcjs.BlobError)("missing options, see usage");
  }
  if (options.access !== "public") {
    throw new (0, _chunkQTTJNF6Bcjs.BlobError)('access must be "public"');
  }
  const headers = {};
  if (options.addRandomSuffix !== void 0) {
    headers["x-add-random-suffix"] = options.addRandomSuffix ? "1" : "0";
  }
  if (options.contentType) {
    headers["x-content-type"] = options.contentType;
  }
  if (options.cacheControlMaxAge !== void 0) {
    headers["x-cache-control-max-age"] = options.cacheControlMaxAge.toString();
  }
  const response = await _chunkQTTJNF6Bcjs.requestApi.call(void 0, 
    `/${toPathname}?fromUrl=${fromUrl}`,
    { method: "PUT", headers },
    options
  );
  return {
    url: response.url,
    downloadUrl: response.downloadUrl,
    pathname: response.pathname,
    contentType: response.contentType,
    contentDisposition: response.contentDisposition
  };
}

// src/index.ts
var put = _chunkQTTJNF6Bcjs.createPutMethod.call(void 0, {
  allowedOptions: ["cacheControlMaxAge", "addRandomSuffix", "contentType"]
});














exports.BlobAccessError = _chunkQTTJNF6Bcjs.BlobAccessError; exports.BlobError = _chunkQTTJNF6Bcjs.BlobError; exports.BlobNotFoundError = _chunkQTTJNF6Bcjs.BlobNotFoundError; exports.BlobServiceNotAvailable = _chunkQTTJNF6Bcjs.BlobServiceNotAvailable; exports.BlobStoreNotFoundError = _chunkQTTJNF6Bcjs.BlobStoreNotFoundError; exports.BlobStoreSuspendedError = _chunkQTTJNF6Bcjs.BlobStoreSuspendedError; exports.BlobUnknownError = _chunkQTTJNF6Bcjs.BlobUnknownError; exports.copy = copy; exports.del = del; exports.getDownloadUrl = _chunkQTTJNF6Bcjs.getDownloadUrl; exports.head = head; exports.list = list; exports.put = put;
//# sourceMappingURL=index.cjs.map